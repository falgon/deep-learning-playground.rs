var searchIndex={};
searchIndex["compute_mnist"] = {"doc":"","i":[[5,"compute","compute_mnist","",null,[[["chap3param",3],["batched",3]],["result",6]]],[5,"execute","","",null,[[],["result",6]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["deep_learning_playground"] = {"doc":"","i":[[0,"neural_network","deep_learning_playground","",null,null],[3,"NeuralNetwork","deep_learning_playground::neural_network","",null,null],[0,"activate_functions","","",null,null],[5,"identity","deep_learning_playground::neural_network::activate_functions","`identity` generates the identity function \\(…",null,[[],[["box",3],["fn",8]]]],[5,"sigmoid","","`sigmoid` generates the sigmoid function \\[…",null,[[],[["box",3],["fn",8]]]],[5,"rectified_linear_unit","","`rectified_linear_unit` generates the Rectufied Linear…",null,[[],[["box",3],["fn",8]]]],[5,"softmax","","`softmax` generates the softmax function: \\[…",null,[[],[["box",3],["fn",8]]]],[11,"new","deep_learning_playground::neural_network","`new` is the constructor of `NeuralNetwork`. If the height…",0,[[["array2",6]],[["result",4],["error",3]]]],[11,"safe_next","","Let a current matrix \\(X^{1\\times m_X}\\), given arguments…",0,[[["array2",6],["box",3]],[["error",3],["result",4]]]],[11,"next","","Compute \\(h(X\\cdot W+B)\\) where \\(X^{n_X\\times m_X}\\) is a…",0,[[["array2",6],["box",3]]]],[11,"dim","","`dim` returns the shape of the array.",0,[[]]],[11,"argmax","","`argmax` returns the index of maximum value. 行毎の最大値",0,[[],["vec",3]]],[0,"perceptron","deep_learning_playground","",null,null],[0,"multi","deep_learning_playground::perceptron","",null,null],[5,"xor_perceptron","deep_learning_playground::perceptron::multi","`xor_perceptron` generates the XOR function. Let \\(p\\) and…",null,[[],[["box",3],["fn",8]]]],[0,"single","deep_learning_playground::perceptron","",null,null],[5,"step_function","deep_learning_playground::perceptron::single","`step_function` is the kind of activation functions. That…",null,[[["float",8]]]],[5,"logical_perceptron","","`logical_perceptron` is the logical perceptron. It can…",null,[[],[["box",3],["fn",8]]]],[5,"and_perceptron","","`and_perceptron` generates the logical AND function. Let…",null,[[],[["box",3],["fn",8]]]],[5,"nand_perceptron","","`nand_perceptron` generates the logical NAND function. Let…",null,[[],[["box",3],["fn",8]]]],[5,"or_perceptron","","`or_perceptron` generates the logical OR function. Let…",null,[[],[["box",3],["fn",8]]]],[0,"setup","deep_learning_playground","",null,null],[0,"dlfs","deep_learning_playground::setup","",null,null],[0,"chap3","deep_learning_playground::setup::dlfs","",null,null],[3,"Chap3Param","deep_learning_playground::setup::dlfs::chap3","`Chap3Param` is data structure that has weight matrixes…",null,null],[12,"weight","","weight matrixes",1,null],[12,"bias","","bias matrixes",1,null],[5,"load_trained_params","","`load_trained_params` loads trained parameters from pickle…",null,[[],[["chap3param",3],["result",6]]]],[0,"mnist","deep_learning_playground::setup","",null,null],[3,"DatasetKey","deep_learning_playground::setup::mnist","",null,null],[3,"MnistImage","","",null,null],[12,"image","","",2,null],[12,"label","","",2,null],[3,"Batched","","",null,null],[12,"images","","",3,null],[12,"labels","","",3,null],[5,"train_dataset","","",null,[[],["datasetkey",3]]],[5,"test_dataset","","",null,[[],["datasetkey",3]]],[5,"load_data","","Loading MNIST Data (http://yann.lecun.com/exdb/mnist/). If…",null,[[["datasetkey",3]],[["result",6],["vec",3]]]],[5,"batched","","Make batche from `MnistImage`.",null,[[["mnistimage",3],["vec",3]],[["result",6],["vec",3]]]],[11,"new","","",3,[[["array2",6],["vec",3]]]],[11,"batch_size","","",3,[[]]],[0,"utils","deep_learning_playground","",null,null],[5,"fst","deep_learning_playground::utils","",null,[[]]],[5,"snd","","",null,[[]]],[0,"fetch_client","","",null,null],[3,"RemoteFile","deep_learning_playground::utils::fetch_client","Information about the file to get. Used when building…",null,null],[12,"host_and_path","","Host name and its path",4,null],[12,"fname","","File name",4,null],[12,"sha256","","sha256 value of the file",4,null],[12,"query","","Query used to get the file",4,null],[3,"FConf","","The structure to perform initialization setting of…",null,null],[12,"save_dir_name","","Directory name",5,null],[12,"remote_file","","Information of the file to be fetched",5,null],[3,"FileInfo","","The `FileInfo`mation",null,null],[12,"host_and_path","","Host name and its path",6,null],[12,"sha256","","sha256 value of the file",6,null],[12,"query","","query used to get the file",6,null],[3,"DirClient","","A type that executes the specified file existence check…",null,null],[12,"file","","Hash map with file name as key and related information as…",7,null],[3,"FetchClient","","The downloader of file",null,null],[12,"dir_client","","directory client",8,null],[11,"new","","`RemoteFile` constructor",4,[[]]],[11,"new","","`FConf` constructor",5,[[]]],[11,"new","","`DirClient` constructor",7,[[["fconf",3]],["result",6]]],[11,"file_path","","`file_path` creates the path of file x under the current…",7,[[],["pathbuf",3]]],[11,"create","","`create` creates directory",7,[[],["result",6]]],[11,"file_create","","`file_create` creates file in directory",7,[[["bytes",3]],["result",6]]],[11,"exists","","`exists` checks if the specified directory exists",7,[[]]],[11,"file_exists","","`file_exists` checks if the specified file exists under…",7,[[]]],[11,"rm_file","","Delete the specified file under the directory",7,[[],[["error",3],["result",4]]]],[11,"new","","`FetchClient` constructor",8,[[["fconf",3]],["result",6]]],[11,"get","","`get` downloads and save files based on settings",8,[[],["result",6]]],[0,"natural_transform","deep_learning_playground::utils","",null,null],[5,"to_failure","deep_learning_playground::utils::natural_transform","`to_failure` is a natural transformation that convers…",null,[[["tostring",8],["result",4]],[["error",3],["result",4]]]],[5,"to_io","","`failure_to_io` is a natural transformation that convers…",null,[[["errorkind",4],["tostring",8],["result",4]],["result",6]]],[5,"opt_to_failure","","`opt_to_failure` is a natural transformation that convers…",null,[[["option",4]],[["error",3],["result",4]]]],[11,"from","deep_learning_playground::neural_network","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from_py","","",0,[[["python",3]]]],[11,"into_py","","",0,[[["python",3]]]],[11,"from","deep_learning_playground::setup::dlfs::chap3","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from_py","","",1,[[["python",3]]]],[11,"into_py","","",1,[[["python",3]]]],[11,"from","deep_learning_playground::setup::mnist","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"from_py","","",9,[[["python",3]]]],[11,"into_py","","",9,[[["python",3]]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"to_string","","",2,[[],["string",3]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from_py","","",2,[[["python",3]]]],[11,"into_py","","",2,[[["python",3]]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from_py","","",3,[[["python",3]]]],[11,"into_py","","",3,[[["python",3]]]],[11,"from","deep_learning_playground::utils::fetch_client","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_string","","",4,[[],["string",3]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"from_py","","",4,[[["python",3]]]],[11,"into_py","","",4,[[["python",3]]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"from_py","","",5,[[["python",3]]]],[11,"into_py","","",5,[[["python",3]]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"from_py","","",6,[[["python",3]]]],[11,"into_py","","",6,[[["python",3]]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"from_py","","",7,[[["python",3]]]],[11,"into_py","","",7,[[["python",3]]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"from_py","","",8,[[["python",3]]]],[11,"into_py","","",8,[[["python",3]]]],[11,"clone","deep_learning_playground::setup::mnist","",9,[[],["datasetkey",3]]],[11,"clone","","",2,[[],["mnistimage",3]]],[11,"clone","deep_learning_playground::utils::fetch_client","",6,[[],["fileinfo",3]]],[11,"clone","","",7,[[],["dirclient",3]]],[11,"clone","","",8,[[],["fetchclient",3]]],[11,"default","deep_learning_playground::neural_network","",0,[[],["neuralnetwork",3]]],[11,"fmt","deep_learning_playground::setup::dlfs::chap3","",1,[[["formatter",3]],["result",6]]],[11,"fmt","deep_learning_playground::setup::mnist","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","deep_learning_playground::utils::fetch_client","",4,[[["formatter",3]],["result",6]]],[11,"fmt","deep_learning_playground::neural_network","",0,[[["formatter",3]],["result",6]]],[11,"fmt","deep_learning_playground::setup::dlfs::chap3","",1,[[["formatter",3]],["result",6]]],[11,"fmt","deep_learning_playground::setup::mnist","",2,[[["formatter",3]],["result",6]]],[11,"fmt","deep_learning_playground::utils::fetch_client","",4,[[["formatter",3]],["result",6]]]],"p":[[3,"NeuralNetwork"],[3,"Chap3Param"],[3,"MnistImage"],[3,"Batched"],[3,"RemoteFile"],[3,"FConf"],[3,"FileInfo"],[3,"DirClient"],[3,"FetchClient"],[3,"DatasetKey"]]};
searchIndex["mnist_to_png"] = {"doc":"","i":[[5,"to_image","mnist_to_png","",null,[[["array2",6]]]],[5,"main","","",null,[[]]],[17,"OUT_FILE_NAME","","",null,null]],"p":[]};
searchIndex["three_layer_neural_network"] = {"doc":"","i":[[5,"main","three_layer_neural_network","",null,[[]]]],"p":[]};
addSearchOptions(searchIndex);initSearch(searchIndex);